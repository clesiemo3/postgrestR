% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pg-get.R
\name{pg.get}
\alias{pg.GET}
\alias{pg.get}
\alias{pgGET}
\alias{pgget}
\alias{postgrest.get}
\title{PostgREST GET}
\usage{
pg.get(domain = "https://postgrest.herokuapp.com", table = "",
  select = "", filter = "", limit = "", order = "",
  pg.filter.syntax = FALSE, url.only = FALSE, encoding = "UTF-8", ...)
}
\arguments{
\item{domain}{The root of the PostgREST server. E.g.
https://postgrest.herokuapp.com}

\item{table}{The table you are querying. Can be an empty string ("") for
default root table listing.}

\item{select}{Character vector or comma separated string of columns to return
(optional)}

\item{filter}{Character vector or comma separated string of filter
expressions in R syntax or PostgREST syntax when pg.filter.syntax == TRUE.}

\item{limit}{Integer limiting the number of records returned from the API.}

\item{order}{Character vector or comma separated string of columns to sort
by. Ascending by default, otherwise wrap the column in desc() to sort by
descending.}

\item{pg.filter.syntax}{Boolean indicating whether your filter expression is
in PostgREST filter syntax or not. Defaults to FALSE using R expressions.}

\item{url.only}{Boolean when TRUE returns the URL built and does not call the
API. Useful for debugging purposes. Defaults to FALSE.}

\item{encoding}{Character passed to \link[httr]{content}. Defaults to UTF-8}

\item{...}{Extra parameters passed to \link[httr]{GET}. e.g. config =
add_headers(custom_header="hello world")}
}
\value{
data.frame of your response
}
\description{
RESTful GET for PostgREST resources.
}
\examples{
domain <- "https://postgrest.herokuapp.com"

pg.get(domain, "speakers", limit = 5,
	filter = c("id >= 228", "featured == TRUE"))

pg.get(domain, "speakers", filter = "id=eq.228",
	pg.filter.syntax = TRUE)

# All of the below give the same result
pg.get(domain, "speakers", filter = "id in (228,161)")
pg.get(domain, "speakers", filter = "id \%in\% (228,161)")
pg.get(domain, "speakers", filter = "id in c(228,161)")
pg.get(domain, "speakers", filter = "id \%in\% c(228,161)")

# View table list
pg.get(domain, "")

# View the URL that will be called for debugging purposes
pg.get(domain, "speakers", select = "id,name,bio",
	limit = 2, filter = "id in (228,161),featured == TRUE",
	url.only = TRUE)

}

